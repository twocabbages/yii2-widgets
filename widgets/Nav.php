<?php
/**
 * Created by PhpStorm.
 * User: air
 * Date: 14-7-27
 * Time: 上午11:53
 */

namespace cabbage\widgets;


use Yii;
use yii\helpers\Html;
use yii\helpers\ArrayHelper;
use yii\bootstrap\Dropdown;

class Nav extends \yii\bootstrap\Nav
{

    const TYPE_DEFAULT = 'default';
    const TYPE_PROGRESS = 'progress';
    const TYPE_NOTIFY = 'notify';
    const TYPE_MESSAGE = 'message';


    const THEME_GREY = 'grey';
    const THEME_PURPLE = 'purple';
    const THEME_GREEN = 'green';
    const THEME_DEFAULT = 'light-blue';

    public $type = self::TYPE_DEFAULT;

    public $theme = self::THEME_DEFAULT;

    public $options = [];

    public $itemsOptions = [];

    public $itemDefaultIcon = [
        self::TYPE_MESSAGE => 'envelope icon-animated-vertical',
        self::TYPE_PROGRESS => 'tasks',
        self::TYPE_NOTIFY => 'bell-alt icon-animated-bell'

    ];
    public $itemDefaultTheme = [
        self::TYPE_MESSAGE => self::THEME_GREEN,
        self::TYPE_PROGRESS => self::THEME_GREY,
        self::TYPE_NOTIFY => self::THEME_PURPLE,

    ];

    public function init()
    {
        Html::addCssClass($this->options, 'ace-nav');

        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * Renders the widget.
     */
    public function run()
    {
        echo $this->renderItems();
    }

    /**
     * Renders widget items.
     */
    public function renderItems()
    {
        $items = [];
        foreach ($this->items as $i => $item) {
            if (isset($item['visible']) && !$item['visible']) {
                unset($items[$i]);
                continue;
            }
            $items[] = $this->renderItem($item);
        }
        return Html::tag('ul', implode("\n", $items), $this->options);
    }

    /**
     * Renders a widget's item.
     * @param string|array $item the item to render.
     * @return string the rendering result.
     * @throws InvalidConfigException
     */
    public function renderItem($item)
    {
        if (is_string($item)) {
            return $item;
        }
        if (!isset($item['label'])) {
            throw new InvalidConfigException("The 'label' option is required.");
        }

        $options = ArrayHelper::getValue($item, 'options', []);
        Html::addCssClass($options, $this->theme);

        $items = ArrayHelper::getValue($item, 'items');

        $linkOptions = ArrayHelper::getValue($item, 'linkOptions', []);
        $linkOptions['href'] = ArrayHelper::getValue($item, 'url', '#');

        if (isset($item['active'])) {
            $active = ArrayHelper::remove($item, 'active', false);
        } else {
            $active = $this->isItemActive($item);
        }

        $itemsOptions = ArrayHelper::getValue($item, 'itemsOptions', []);
        if ($items !== null) {
            $linkOptions['data-toggle'] = 'dropdown';
            Html::addCssClass($linkOptions, 'dropdown-toggle');
            if (is_array($items)) {
                if ($this->activateItems) {
                    $items = $this->isChildActive($items, $active);
                }
                $items = $this->renderChildItems($items, $itemsOptions);
            }
        }

        if ($this->activateItems && $active) {
            Html::addCssClass($options, 'active');
        }

        if (isset($item['label']) && isset($item['content']) && isset($item['image'])) {
            $itemHtml = Html::tag('a', "<img class=\"nav-user-photo\" src=\"{$item["image"]}\" alt=\"Jason's Photo\">" . Html::tag('span', "<small>{$item["label"]}</small>{$item["content"]}", ['class' => 'user-info']) . '<i class="icon-caret-down"></i>', $linkOptions);
        } else {
            $icon = ArrayHelper::getValue($item, 'icon', $this->itemDefaultIcon[ArrayHelper::getValue($itemsOptions, 'type', $this->type)]);
            $itemHtml = Html::tag('a', "<i class=\"icon-{$icon}\"></i>" . "<span class=\"badge badge-{$this->theme}\">{$item["content"]}</span>", $linkOptions);
        }

        return Html::tag('li', $itemHtml . $items, $options);
    }

    /**
     * Renders menu items.
     * @param array $items the menu items to be rendered
     * @param array $containerOptions the HTML attributes for the widget container tag
     * @return string the rendering result.
     * @throws InvalidConfigException if the label option is not specified in one of the items.
     */
    protected function renderChildItems($items, $itemsOptions)
    {
        $lines = [];
        $type = ArrayHelper::getValue($itemsOptions, 'type', self::TYPE_DEFAULT);
        foreach ($items as $i => $item) {
            if (isset($item['visible']) && !$item['visible']) {
                unset($items[$i]);
                continue;
            }
            if (is_string($item)) {
                $lines[] = $item;
                continue;
            }
            if (!isset($item['label'])) {
                throw new InvalidConfigException("The 'label' option is required.");
            }
            $encodeLabel = isset($item['encode']) ? $item['encode'] : $this->encodeLabels;
            $label = $encodeLabel ? Html::encode($item['label']) : $item['label'];
            $options = ArrayHelper::getValue($item, 'options', []);
            $linkOptions = ArrayHelper::getValue($item, 'linkOptions', []);
            $linkOptions['tabindex'] = '-1';


            switch ($type) {
                case self::TYPE_MESSAGE:
                    $content = Html::a("<img src=\"assets/avatars/avatar.png\" class=\"msg-photo\" alt=\"Alex's Avatar\">
										<span class=\"msg-body\">
											<span class=\"msg-title\">
												<span class=\"blue\">Alex:</span>
                Ciao sociis natoque penatibus et auctor ...
											</span>

											<span class=\"msg-time\">
												<i class=\"icon-time\"></i>
												<span>a moment ago</span>
											</span>
										</span>",
                        ArrayHelper::getValue($item, 'url', '#'), $linkOptions);
                    break;
                case self::TYPE_NOTIFY:
                    $content = Html::a("<div class=\"clearfix\">
											<span class=\"pull-left\">
												<i class=\"btn btn-xs no-hover btn-pink icon-comment\"></i>
												New Comments
											</span>
											<span class=\"pull-right badge badge-info\">+12</span>
										</div>",
                        ArrayHelper::getValue($item, 'url', '#'), $linkOptions);
                    break;
                case self::TYPE_PROGRESS:
                    $content = Html::a("<div class=\"clearfix\">
											<span class=\"pull-left\">Software Update</span>
											<span class=\"pull-right\">65%</span>
										</div>
										<div class=\"progress progress-mini \">
											<div style=\"width:65%\" class=\"progress-bar \"></div>
										</div>",
                        ArrayHelper::getValue($item, 'url', '#'), $linkOptions);
                    break;
                default:
                    $icon = ArrayHelper::getValue($item, 'icon', 'list');
                    $content = Html::a("<i class=\"icon-{$icon}\"></i>" . $label, ArrayHelper::getValue($item, 'url', '#'), $linkOptions);
            }
            $lines[] = Html::tag('li', $content, $options);
        }

        if ($type === self::TYPE_DEFAULT) {
            $itemsOptions['class'] = 'user-menu pull-right dropdown-menu dropdown-yellow dropdown-caret dropdown-close';
        } else {
            $itemsOptions['class'] = 'pull-right dropdown-navbar dropdown-menu dropdown-caret dropdown-close';
            if (isset($itemsOptions['prepend'])) {
                array_unshift($lines, Html::tag('li', $itemsOptions['prepend'], ['class' => 'dropdown-header']));
            }
            array_push($lines, Html::tag('li', Html::a("查看更多<i class=\"icon-arrow-right\"></i>", ArrayHelper::getValue($itemsOptions, 'append', '#'))));
        }
        return Html::tag('ul', implode("\n", $lines), $itemsOptions);
    }
}